starting to be exhausted trying to keep to current day

work log
@17:30h - 18:30h for part 1

own comments
* rocks need to move from position to other position most (north in this case)
  * i assume for part 2, it can be to other coordinates 
* for moving rocks, note that on each move, they add space to others and so on
  * maybe it can be optimized to avoid recalculating all lines again
* rocks only stop when found other rocks
* rocks # don't move but are stoppers
* weight is length - current row
part 1 working at first attempt :D

part2 too slow, without any parallelization on release mode
*** Cycles result is 64 after 1000000000 iterations (took 00:09:48.2532852)

results for TiltNorth() 10M 
  --> old implementation 2' 6"
  --> new 1' 32" (parallel for) --> for 1000M and 4 directions, it would took ~10h
  --> new 2' 32" (non-parallel)

new ideas
1. after each cycle calculate value, I assume there should be a cycle (same pattern) or it may converge 
2. find a better algorithm, idea try to avoid locate always RoundedRocks (another list of rounded with their position?)

solution provided (but not programmed)
Outputed results for each cycle, and find that there is a cycle of period 9 (after it converged)
pos1 = 102509,102505,102500,102498,102507,102504,102497,102507,pos9 = 102512 (not sure which value started the cycle, don't care too much)
After N cycles of calculation, with the pattern, take the position of that lets call it posReference
resultPosition = (1000M cycles - N) % 9 + posReference

own advice
brute force again or almost
alternative for each direction 
  calculate stoppers (just once for each direction) 
    (note on given row can be more than one: several # and edges of array)
  for each 0 until each stopper
  switch 0 to "++stopper"

evaluation                part1 / part2
difficulty (1st glance):  ***+  / *+ or *****+ (depending on performance issues)
real difficulty:          *     / ***
effort:                   **+ (time) / *****
enjoy:                    **** / **+
